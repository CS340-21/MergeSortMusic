{"ast":null,"code":"var _jsxFileName = \"/home/pooch/School/CS340/Project/NewHotness/frontend/src/components/NewPlaylistDialog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Divider } from '@material-ui/core';\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport axios from 'axios'; //Needed to make a post request to backend -- DO NOT REMOVE\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\naxios.defaults.xsrfCookieName = \"csrftoken\";\nexport default function NewPlaylistDialog(props) {\n  _s();\n\n  const [open, setOpen] = useState(false);\n  const [displayModal, setModalDisplay] = useState(false);\n  const [spotifyAuthenticated, setSpotifyAuthenticated] = useState(false);\n  const [spotifyPlaylist, setSpotifyPlaylist] = useState([]);\n  const [possibleImportPlaylist, setPossibleImportPlaylist] = useState([]);\n\n  const authenticateSpotify = () => {\n    fetch(\"http://127.0.0.1:8000/spotify/is-authenticated\").then(response => response.json()).then(data => {\n      setSpotifyAuthenticated(data.status);\n\n      if (!data.status) {\n        fetch(\"http://127.0.0.1:8000/spotify/get-auth-url\").then(response => response.json()).then(data => {\n          window.location.replace(data.url);\n          fetch(\"/spotify/get-playlists\").then(response => {\n            if (!response.ok) {\n              return {};\n            } else {\n              return response.json();\n            }\n          }).then(data => {\n            setSpotifyPlaylist(data);\n            console.log(data);\n          });\n        });\n      } else {\n        fetch(\"/spotify/get-playlists\").then(response => {\n          if (!response.ok) {\n            return {};\n          } else {\n            return response.json();\n          }\n        }).then(data => {\n          setSpotifyPlaylist(data);\n        });\n      }\n    });\n  };\n\n  const importPlaylist = () => {\n    var user = {\n      username: props.username,\n      password: props.password,\n      playlist: []\n    };\n    possibleImportPlaylist.forEach(playlist => {\n      user.playlist.push(playlist);\n    });\n    axios.post('http://127.0.0.1:8000/login/', user).then(() => {\n      props.setPlaylist(user.playlist);\n    });\n  };\n\n  const addPossiblePlaylist = playlist => {\n    var tempPlaylist = possibleImportPlaylist;\n\n    if (tempPlaylist.includes(playlist)) {\n      tempPlaylist.splice(tempPlaylist.indexOf(playlist), 1);\n    } else {\n      tempPlaylist.push(playlist);\n    }\n\n    console.log(tempPlaylist);\n    setPossibleImportPlaylist(tempPlaylist);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n    setModalDisplay(true);\n  };\n\n  const handleClose = value => {\n    setOpen(false);\n    setModalDisplay(false);\n  };\n\n  if (!displayModal) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        onClick: handleClickOpen,\n        style: {\n          minWidth: \"15%\",\n          margin: \"auto\",\n          color: \"#222326\",\n          backgroundColor: \"#1db954\"\n        },\n        children: \"Import Playlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      onClose: handleClose,\n      \"aria-labelledby\": \"simple-dialog-title\",\n      open: open,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"simple-dialog-title\",\n        children: \"Here's where they'd import a playlist from spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          authenticateSpotify();\n        },\n        disabled: spotifyAuthenticated,\n        variant: \"contained\",\n        color: \"default\",\n        startIcon: /*#__PURE__*/_jsxDEV(ImportExportIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 137\n        }, this),\n        children: \"Link Spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        children: spotifyPlaylist.map(playlist => {\n          const labelId = `checkbox-list-label-${playlist.name}`;\n          return /*#__PURE__*/_jsxDEV(ListItem, {\n            role: undefined,\n            dense: true,\n            button: true,\n            onClick: null,\n            children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                edge: \"start\",\n                tabIndex: -1,\n                checked: props.playlist.includes(playlist),\n                disableRipple: true,\n                inputProps: {\n                  'aria-labelledby': labelId\n                },\n                onClick: () => {\n                  addPossiblePlaylist(playlist);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              id: labelId,\n              primary: `${playlist.name}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this)]\n          }, playlist, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          importPlaylist();\n        },\n        disabled: !spotifyAuthenticated,\n        variant: \"contained\",\n        color: \"default\",\n        startIcon: /*#__PURE__*/_jsxDEV(ImportExportIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 133\n        }, this),\n        children: \"Import Playlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(NewPlaylistDialog, \"AgqlMZCUWFXVUzHrvrucxDLcxcg=\");\n\n_c = NewPlaylistDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPlaylistDialog\");","map":{"version":3,"sources":["/home/pooch/School/CS340/Project/NewHotness/frontend/src/components/NewPlaylistDialog.js"],"names":["React","useState","useEffect","Button","DialogTitle","Dialog","Divider","ImportExportIcon","Checkbox","List","ListItem","ListItemIcon","ListItemText","axios","defaults","xsrfHeaderName","xsrfCookieName","NewPlaylistDialog","props","open","setOpen","displayModal","setModalDisplay","spotifyAuthenticated","setSpotifyAuthenticated","spotifyPlaylist","setSpotifyPlaylist","possibleImportPlaylist","setPossibleImportPlaylist","authenticateSpotify","fetch","then","response","json","data","status","window","location","replace","url","ok","console","log","importPlaylist","user","username","password","playlist","forEach","push","post","setPlaylist","addPossiblePlaylist","tempPlaylist","includes","splice","indexOf","handleClickOpen","handleClose","value","minWidth","margin","color","backgroundColor","map","labelId","name","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Divider } from '@material-ui/core';\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport axios from 'axios';\n\n//Needed to make a post request to backend -- DO NOT REMOVE\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\naxios.defaults.xsrfCookieName = \"csrftoken\";\n\nexport default function NewPlaylistDialog(props) {\n  const [open, setOpen] = useState(false);\n  const [displayModal, setModalDisplay] = useState(false);\n  const [spotifyAuthenticated, setSpotifyAuthenticated] = useState(false);\n  const [spotifyPlaylist, setSpotifyPlaylist] = useState([]);\n  const [possibleImportPlaylist, setPossibleImportPlaylist] = useState([]);\n\n  const authenticateSpotify = () => {\n    fetch(\"http://127.0.0.1:8000/spotify/is-authenticated\")\n      .then((response) => response.json())\n      .then((data) => {\n        setSpotifyAuthenticated(data.status);\n        if (!data.status) {\n          fetch(\"http://127.0.0.1:8000/spotify/get-auth-url\")\n            .then((response) => response.json())\n            .then((data) => {\n              window.location.replace(data.url);\n              fetch(\"/spotify/get-playlists\")\n                .then((response) => {\n                  if (!response.ok) {\n                    return {};\n                  } else {\n                  return response.json();\n                }\n                }).then((data) => {\n                  setSpotifyPlaylist(data);\n                  console.log(data);\n              });\n            });\n        }\n        else{\n          fetch(\"/spotify/get-playlists\")\n            .then((response) => {\n              if (!response.ok) {\n                return {};\n              } else {\n                return response.json();\n              }\n            }).then((data) => {\n              setSpotifyPlaylist(data);\n            });\n        }\n      });\n  };\n\n\n  const importPlaylist = () =>{\n    var user = {\n      username: props.username,\n      password: props.password,\n      playlist: []\n    }\n    possibleImportPlaylist.forEach((playlist) => {\n      user.playlist.push(playlist)\n    });\n    axios.post('http://127.0.0.1:8000/login/', user).then(()=> {\n      props.setPlaylist(user.playlist);\n    });\n  }\n\n  const addPossiblePlaylist = (playlist) => {\n    var tempPlaylist = possibleImportPlaylist\n    if(tempPlaylist.includes(playlist)){\n      tempPlaylist.splice(tempPlaylist.indexOf(playlist), 1);\n    }\n    else{\n      tempPlaylist.push(playlist);\n    }\n    console.log(tempPlaylist)\n    setPossibleImportPlaylist(tempPlaylist);\n  }\n  \n  const handleClickOpen = () => {\n    setOpen(true);\n    setModalDisplay(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n    setModalDisplay(false);\n  };\n\n  if(!displayModal){\n    return (\n      <div>\n        <Button\n          variant=\"outlined\" \n          color=\"primary\" \n          onClick={handleClickOpen}\n          style={{minWidth: \"15%\", \n                  margin: \"auto\",\n                  color: \"#222326\",\n                  backgroundColor: \"#1db954\",\n                }}>Import Playlist</Button>\n      </div>\n    );\n  }\n  else{\n    return (\n      <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n        <DialogTitle id=\"simple-dialog-title\">Here's where they'd import a playlist from spotify</DialogTitle>\n        <Divider></Divider>\n        <Button onClick={() => {authenticateSpotify();}} disabled={spotifyAuthenticated} variant=\"contained\" color=\"default\" startIcon={<ImportExportIcon />}>Link Spotify</Button>\n        <List>\n          {spotifyPlaylist.map((playlist) => {\n            const labelId = `checkbox-list-label-${playlist.name}`;\n            return (\n              <ListItem key={playlist} role={undefined} dense button onClick={null}>\n                <ListItemIcon>\n                  <Checkbox\n                    edge=\"start\"\n                    tabIndex={-1}\n                    checked = {props.playlist.includes(playlist)}\n                    disableRipple\n                    inputProps={{ 'aria-labelledby': labelId }}\n                    onClick = {() => {addPossiblePlaylist(playlist);}}\n                  />\n                </ListItemIcon>\n                <ListItemText id={labelId} primary={`${playlist.name}`} />\n              </ListItem>\n            );\n          })}\n        </List>\n        <Button onClick={() => {importPlaylist();}} disabled={!spotifyAuthenticated} variant=\"contained\" color=\"default\" startIcon={<ImportExportIcon />}>Import Playlist</Button>\n      </Dialog>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}